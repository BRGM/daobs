<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cm="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">

  <bean id="bridgePropertyPlaceholder"
        class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
    <property name="location" value="config.properties"/>
  </bean>

  <bean id="inspireValidationClient" class="org.daobs.tasks.validation.inspire.OnlineServiceValidatorBean">
    <property name="inspireResourceTesterURL" value="${inspire.validator.url}"/>
  </bean>

  <cm:errorHandler id="loggingErrorHandler"
                      type="LoggingErrorHandler"
                      logName="daobs.tasks.validation-checker"
                      level="DEBUG"/>

  <cm:camelContext
          xmlns:gmd="http://www.isotc211.org/2005/gmd"
          xmlns:gco="http://www.isotc211.org/2005/gco"
          id="validation-checker"
          errorHandlerRef="loggingErrorHandler"
          useMDCLogging="true">

    <cm:threadPoolProfile id="myDefaultProfile"
                          defaultProfile="true"
                          poolSize="5"
                          maxPoolSize="5"/>

    <cm:onException>
      <cm:exception>org.apache.camel.component.http4.HttpOperationFailedException</cm:exception>
      <cm:continued>
        <cm:constant>true</cm:constant>
      </cm:continued>
      <cm:log message="Oops, something went wrong: $simple{exception.message}."
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:log message="$simple{exception.responseBody}"
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:log message="$simple{exception.stacktrace}"
              loggingLevel="ERROR"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:to uri="log:org.daobs.task.ValidationChecker?showBody=true"/>
    </cm:onException>




    <cm:route id="route-get-non-validated-records">
      <cm:description>
        Query document having no validation status
        +documentType:metadata -isValid:[* TO *]

        Do HTTP query using
        http://localhost:8983/solr/data/select?q=%2BdocumentType%3Ametadata+-isValid%3A%5B*+TO+*%5D&amp;fl=document%2Cid&amp;wt=xml&amp;indent=true

        Loop on all records.

        Check against the XSD.
      </cm:description>
      <cm:from uri="timer://start?repeatCount=1"/>

      <cm:log message="Background task checking document validation status ..."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>

      <!-- TODO: Add paging or load all -->
      <cm:setHeader headerName="Exchange.HTTP_URI">
        <cm:simple>http://{{solr.server.url}}/data/select?q={{solr.select.filter}}&amp;fl={{solr.select.field}}&amp;wt=xml&amp;start=0&amp;rows=10000</cm:simple>
      </cm:setHeader>
      <cm:to uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
      <cm:split parallelProcessing="true">
        <cm:xpath>//doc</cm:xpath>
        <cm:setBody>
          <cm:xpath resultType="java.lang.String">doc/str[@name = 'document']/text()</cm:xpath>
        </cm:setBody>
        <cm:setHeader headerName="uuid">
          <cm:xpath resultType="java.lang.String">doc/str[@name = 'id']</cm:xpath>
        </cm:setHeader>
        <!--<cm:convertBodyTo type="org.w3c.dom.Document" charset="UTF-8"/>-->

        <cm:multicast>
          <!-- XSD validation-->
          <cm:to uri="direct:validation-xsd"/>

          <!-- INSPIRE validation -->
          <cm:to uri="direct:validation-inspire"/>
        </cm:multicast>
      </cm:split>
    </cm:route>



    <cm:route id="route-validation-xsd-checker">
      <!--
      Check from file
      <cm:from uri="file:src/test/resources/?fileName=*.xml&amp;noop=true&amp;consumer.delay=100000"/>-->
      <cm:from uri="direct:validation-xsd"/>
      <cm:setHeader headerName="beginTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setHeader>

      <!-- Retrieve UUID from XML document or Solr document ? -->
      <cm:setHeader headerName="documentIdentifier">
        <cm:xpath resultType="java.lang.String">
          /gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString/text()
        </cm:xpath>
      </cm:setHeader>
      <cm:log message="Checking record with UUID '$simple{header.documentIdentifier}' using its standards XSD. Start at $simple{header.beginTime}."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>

      <!--<cm:log message="XML document is: ${body}"
              loggingLevel="DEBUG"
              logName="org.daobs.task.ValidationChecker"/>-->

      <!-- Check document against an XSD -->
      <cm:doTry>
        <cm:to uri="validator:file:src/main/resources/schemas/iso19139/schema.xsd?useDom=false"/>
        <cm:setBody>
          <cm:simple>
            <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id">$simple{header.documentIdentifier}</field>
                <field name="schemaValidDate" update="set">$simple{header.beginTime}</field>
                <field name="isSchemaValid" update="set">true</field>
              </doc>
            </add>]]>
          </cm:simple>
        </cm:setBody>
        <cm:to uri="file:tmp/query/?fileName=xsd-valid-$simple{header.documentIdentifier}.xml&amp;charset=utf-8"/>
        <cm:doCatch>
          <cm:exception>org.apache.camel.ValidationException</cm:exception>
          <cm:transform>
            <cm:simple>${property.CamelExceptionCaught}</cm:simple>
          </cm:transform>
          <cm:transform>
            <cm:simple>${bodyAs(String)}</cm:simple>
          </cm:transform>
          <cm:log message="Errors are: ${body}. Failure."
                  loggingLevel="INFO"
                  logName="org.daobs.task.ValidationChecker"/>
          <cm:log message="'$simple{header.documentIdentifier}' is an invalid document."
                  loggingLevel="INFO"
                  logName="org.daobs.task.ValidationChecker"/>

          <cm:setBody>
            <cm:simple>
              <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id">$simple{header.documentIdentifier}</field>
                <field name="schemaValidDate" update="set">$simple{header.beginTime}</field>
                <field name="isSchemaValid" update="set">false</field>
                <field name="schemaValidReport" update="set"><![CDATA[$simple{body}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
              </doc>
            </add>]]>
            </cm:simple>
          </cm:setBody>
          <cm:to uri="file:tmp/query/?fileName=xsd-invalid-$simple{header.documentIdentifier}.xml&amp;charset=utf-8"/>
        </cm:doCatch>
        <cm:doFinally>
        </cm:doFinally>
      </cm:doTry>
    </cm:route>




    <cm:route id="route-validation-inspire-checker">
      <cm:from uri="direct:validation-inspire"/>
      <cm:setHeader headerName="documentIdentifier">
        <cm:xpath resultType="java.lang.String">
          /gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString/text()
        </cm:xpath>
      </cm:setHeader>
      <cm:setHeader headerName="beginTime">
        <cm:simple>${date:now:yyyyMMdd'T'HH':'mm':'SS}</cm:simple>
      </cm:setHeader>
      <cm:log message="Checking record with UUID '$simple{header.documentIdentifier}' using INSPIRE validation service. Start at $simple{header.beginTime}."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>

      <cm:bean ref="inspireValidationClient" method="validateBody"/>

      <cm:setBody>
        <cm:simple>
          <![CDATA[<add commitWithin="10000">
              <doc>
                <field name="id">$simple{header.documentIdentifier}</field>
                <field name="validDate" update="set">$simple{header.beginTime}</field>
                <field name="isValid" update="set">${body.status}</field>
                <field name="validReport" update="set"><![CDATA[${body.report}]]><![CDATA[]]]]><![CDATA[>]]><![CDATA[</field>
                <field name="validInfo" update="set">${body.info}</field>
              </doc>
            </add>]]>
        </cm:simple>
      </cm:setBody>
      <cm:to uri="file:tmp/query/?fileName=inspire-validation-$simple{header.documentIdentifier}.xml&amp;charset=utf-8"/>
    </cm:route>




    <cm:route id="save-validation-status">
      <!--<cm:from uri="direct:save-validation-status"/>-->
      <cm:from uri="file:tmp/query/?consumer.delay=10000"/>
      <cm:log message="Updating index with '$simple{body}' ..."
              loggingLevel="INFO"
              logName="org.daobs.task.ValidationChecker"/>
      <cm:setHeader headerName="Exchange.HTTP_URI">
        <cm:simple>http://{{solr.server.url}}/update</cm:simple>
      </cm:setHeader>
      <cm:setHeader headerName="camelHttpMethod">
        <cm:constant>POST</cm:constant>
      </cm:setHeader>
      <cm:setHeader headerName="Content-Type">
        <cm:constant>application/xml</cm:constant>
      </cm:setHeader>
      <cm:to uri="http4://solr.server.url?authUsername={{solr.server.user}}&amp;authPassword={{solr.server.password}}&amp;authenticationPreemptive=true&amp;throwExceptionOnFailure=false"/>
      <cm:log message="Solr response: ${body}."
              loggingLevel="DEBUG"
              logName="org.daobs.task.ValidationChecker"/>
    </cm:route>

  </cm:camelContext>

</beans>
